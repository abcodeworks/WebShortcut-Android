/**
 * Copyright 2014 by Andre Beckus
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package com.abcodeworks.webshortcututil.read;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

import org.junit.*;
import org.junit.rules.ExpectedException;

import com.abcodeworks.webshortcututil.read.ShortcutReadException;
import com.abcodeworks.webshortcututil.read.ShortcutReader;
import com.abcodeworks.webshortcututil.read.UrlShortcutReader;
import static com.abcodeworks.webshortcututil.ShortcutTestHelper.testReadShortcut;
import static com.abcodeworks.webshortcututil.ShortcutTestHelper.getTestStream;
import static org.junit.Assert.*;

public class UrlShortcutReaderTest
{
    ShortcutReader reader = null;
    
    final String
        CHROME_PATH =   "samples" + File.separator + "real" + File.separator + "url" + File.separator + "Chrome",
        FIREFOX_PATH =  "samples" + File.separator + "real" + File.separator + "url" + File.separator + "Firefox",
        IE_PATH =       "samples" + File.separator + "real" + File.separator + "url" + File.separator + "IE",
        FAKE_PATH =     "samples" + File.separator + "fake" + File.separator + "url";

    @Rule
    public ExpectedException thrown= ExpectedException.none();
    
    @Before
    public void setUp() throws Exception {
        reader = new UrlShortcutReader();
    }
    
    @Test
    public void testReadUrlString()
                  throws FileNotFoundException,
                         ShortcutReadException,
                         IOException
    {
        // Shortcuts generated by Chrome
        testReadShortcut(reader, CHROME_PATH, "Google.url", "Google", "https://www.google.com/");
        testReadShortcut(reader, CHROME_PATH, "Myspace - Social Entertainment.url", "Myspace - Social Entertainment", "http://www.myspace.com/");
        testReadShortcut(reader, CHROME_PATH, "Yahoo!.url", "Yahoo!", "http://www.yahoo.com/");
        
        // Shortcuts generated by Firefox
        testReadShortcut(reader, FIREFOX_PATH,  "Google.URL", "Google", "https://www.google.com/");
        testReadShortcut(reader, FIREFOX_PATH,  "Myspace Social Entertainment.URL", "Myspace Social Entertainment", "http://www.myspace.com/");
        testReadShortcut(reader, FIREFOX_PATH,  "Yahoo!.URL", "Yahoo!", "http://www.yahoo.com/");
        
        // Shortcuts generated by Internet Explorer
        testReadShortcut(reader, IE_PATH, "cn.yahoo.com.url", "cn.yahoo.com", "http://cn.yahoo.com/");
        testReadShortcut(reader, IE_PATH, "Google.url", "Google", "https://www.google.com/");
        testReadShortcut(reader, IE_PATH, "Myspace  Social Entertainment.url", "Myspace  Social Entertainment", "http://www.myspace.com/");
        testReadShortcut(reader, IE_PATH, "Yahoo!.url", "Yahoo!", "http://www.yahoo.com/");
        
        //Hypothetical/Fake Tests
        testReadShortcut(reader, FAKE_PATH, "LotsOfWhitespace.url", "LotsOfWhitespace", "https://www.google.com/");
        testReadShortcut(reader, FAKE_PATH, "GarbledEntry.url", "GarbledEntry", "https://www.google.com/");

        try {
            InputStream instream = getClass().getResource(File.separator + FAKE_PATH + File.separator + "HeaderOnly.url").openStream();
            reader.readUrlString(instream);
            fail("Did not get ShortcutReadException");
        } catch(ShortcutReadException e) {
            assertEquals("URL not found in file", e.getMessage());
        }
    }
    
    @Test
    public void testReadUrlStringNonAscii()
                  throws FileNotFoundException,
                         ShortcutReadException,
                         IOException
    {
        // Shortcuts generated by Chrome
        testReadShortcut(reader, CHROME_PATH, "CIOとITマネージャーの課題を解決するオンラインメディア - ZDNet Japan.url", "CIOとITマネージャーの課題を解決するオンラインメディア - ZDNet Japan", "http://japan.zdnet.com/");
        testReadShortcut(reader, CHROME_PATH, "Microsoft Sverige - Enheter och tjänster.url", "Microsoft Sverige - Enheter och tjänster", "http://www.microsoft.com/sv-se/default.aspx");
        testReadShortcut(reader, CHROME_PATH, "sverige - Sök på Google.url", "sverige - Sök på Google", "http://www.google.se/#sclient=tablet-gws&hl=sv&tbo=d&q=sverige&oq=sveri&gs_l=tablet-gws.1.1.0l3.13058.15637.28.17682.5.2.2.1.1.0.143.243.0j2.2.0...0.0...1ac.1.xX8iu4i9hYM&pbx=1&fp=1&bpcl=40096503&biw=1280&bih=800&bav=on.2,or.r_gc.r_pw.r_qf.&cad=b");
        testReadShortcut(reader, CHROME_PATH, "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn.url", "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn", "http://www.xn--fiqs8sirgfmh.xn--zfr164b.cn/");
        testReadShortcut(reader, CHROME_PATH, "中国雅虎首页.url", "中国雅虎首页", "http://cn.yahoo.com/");
        testReadShortcut(reader, CHROME_PATH, "导航.中国.url", "导航.中国", "http://xn--fet810g.xn--fiqs8s/");
        testReadShortcut(reader, CHROME_PATH, "百度一下，你就知道.url", "百度一下，你就知道", "http://www.baidu.com/");
        
        // Shortcuts generated by Firefox
        testReadShortcut(reader, FIREFOX_PATH,  "CIOとITマネージャーの課題を解決するオンラインメディア - ZDNet Japan.URL", "CIOとITマネージャーの課題を解決するオンラインメディア - ZDNet Japan", "http://japan.zdnet.com/");
        testReadShortcut(reader, FIREFOX_PATH,  "Microsoft Sverige Enheter och tjänster.URL", "Microsoft Sverige Enheter och tjänster", "http://www.microsoft.com/sv-se/default.aspx");
        testReadShortcut(reader, FIREFOX_PATH,  "sverige - Sök på Google.URL", "sverige - Sök på Google", "http://www.google.se/#sclient=tablet-gws&hl=sv&tbo=d&q=sverige&oq=sveri&gs_l=tablet-gws.1.1.0l3.13058.15637.28.17682.5.2.2.1.1.0.143.243.0j2.2.0...0.0...1ac.1.xX8iu4i9hYM&pbx=1&fp=1&bpcl=40096503&biw=1280&bih=800&bav=on.2,or.r_gc.r_pw.r_qf.&cad=b");
        testReadShortcut(reader, FIREFOX_PATH,  "中国雅虎首页.URL", "中国雅虎首页", "http://cn.yahoo.com/");
        testReadShortcut(reader, FIREFOX_PATH,  "百度一下，你就知道.URL", "百度一下，你就知道", "http://www.baidu.com/");

        // The following two tests fail.  I had trouble getting Java to read the URLs without performing translations.
        // Regardless, I suspect the files are not correctly written to start with (since they are the only .url
        // files that contain non-standard ASCII). Therefore I am going to ignore them.
        //testShortcut(reader, FIREFOX_PATH,  + "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn.URL", "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn", "http://www.-\u00FD?\u009C.?\u00A1.cn/");
        //testShortcut(reader, FIREFOX_PATH,  + "导航.中国.URL", "导航.中国", "http://\u00FC*.-\u00FD/");
        
        // Shortcuts generated by Internet Explorer
        testReadShortcut(reader, IE_PATH, "Microsoft Sverige  Enheter och tjänster.url", "Microsoft Sverige  Enheter och tjänster", "http://www.microsoft.com/sv-se/default.aspx");
        testReadShortcut(reader, IE_PATH, "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn.url", "www.ÖÐ¹úÕþ¸®.ÕþÎñ.cn", "http://www.中国政府.政务.cn/");
        testReadShortcut(reader, IE_PATH, "百度一下，你就知道.url", "百度一下，你就知道", "http://www.baidu.com/");

    }
    
    @Test
    public void testReadHeaderOnly()
            throws FileNotFoundException,
                   ShortcutReadException,
                   IOException {
        thrown.expect(ShortcutReadException.class);
        thrown.expectMessage("URL not found in file");
        reader.readUrlString(getTestStream(FAKE_PATH, "HeaderOnly.url"));
    }
}
